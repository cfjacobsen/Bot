// test_supervisor.js
import SupervisorBot from './supervisorbot.mjs';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configurar vari√°veis de ambiente para teste
process.env.USE_TESTNET = 'true';
process.env.SIMULA = 'true';
process.env.OPENAI_API_KEY = 'test_key';
process.env.DEEPSEEK_API_KEY = 'test_key';

async function runTests() {
    console.log('=== INICIANDO TESTES DO SUPERVISORBOT ===\n');
    
    let testsPassed = 0;
    let totalTests = 0;
    
    // Teste 1: Detec√ß√£o de Modo de Opera√ß√£o
    totalTests++;
    console.log('1. Testando detec√ß√£o de modo de opera√ß√£o...');
    try {
        const supervisor = new SupervisorBot();
        const modo = supervisor.modoOperacao;
        
        if (modo === 'simulacao') {
            console.log('‚úì Modo de opera√ß√£o detectado corretamente: SIMULA');
            testsPassed++;
        } else {
            console.log('‚úó Falha na detec√ß√£o do modo de opera√ß√£o');
        }
    } catch (error) {
        console.log('‚úó Erro na detec√ß√£o do modo de opera√ß√£o:', error.message);
    }
    
    // Teste 2: Cria√ß√£o de Backup
    totalTests++;
    console.log('\n2. Testando sistema de backup...');
    try {
        const supervisor = new SupervisorBot();
        
        // Criar arquivo de bot de teste
        const conteudoTeste = '// Bot de teste\nconsole.log("Teste");';
        await fs.writeFile(supervisor.arquivoBotPrincipal, conteudoTeste, 'utf8');
        
        // Criar backup
        const backupPath = await supervisor.criarBackup();
        
        if (backupPath) {
            console.log('‚úì Backup criado com sucesso:', path.basename(backupPath));
            testsPassed++;
        } else {
            console.log('‚úó Falha na cria√ß√£o do backup');
        }
    } catch (error) {
        console.log('‚úó Erro na cria√ß√£o do backup:', error.message);
    }
    
    // Teste 3: Restaura√ß√£o de Backup
    totalTests++;
    console.log('\n3. Testando restaura√ß√£o de backup...');
    try {
        const supervisor = new SupervisorBot();
        
        // Restaurar backup
        const restaurado = await supervisor.restaurarBackup();
        
        if (restaurado) {
            console.log('‚úì Backup restaurado com sucesso');
            testsPassed++;
        } else {
            console.log('‚úó Falha na restaura√ß√£o do backup');
        }
    } catch (error) {
        console.log('‚úó Erro na restaura√ß√£o do backup:', error.message);
    }
    
    // Teste 4: Processamento de Estado de Par
    totalTests++;
    console.log('\n4. Testando processamento de estado de par...');
    try {
        const supervisor = new SupervisorBot();
        
        const estadoPar = {
            simbolo: 'BTCUSDT',
            precoAtual: 50000,
            rsi: 65,
            emaShort: 49500,
            emaLong: 49000,
            macd: { histogram: 150, signal: 100, macd: 50 },
            volatilidade: 0.025,
            volume24h: 1000000,
            tendencia: 'ALTA'
        };
        
        // Salvar estado do par
        await supervisor.salvarEstadoPar(estadoPar);
        
        // Processar o par
        await supervisor.processarPar('BTCUSDT');
        
        // Verificar se a recomenda√ß√£o foi criada
        const recomendacaoPath = path.join(supervisor.diretorioRecomendacoes, 'recomendacao_BTCUSDT.json');
        try {
            await fs.access(recomendacaoPath);
            console.log('‚úì Processamento de par conclu√≠do com sucesso');
            testsPassed++;
        } catch {
            console.log('‚úó Arquivo de recomenda√ß√£o n√£o foi criado');
        }
    } catch (error) {
        console.log('‚úó Erro no processamento do par:', error.message);
    }
    
    // Teste 5: Detec√ß√£o de Emerg√™ncia
    totalTests++;
    console.log('\n5. Testando detec√ß√£o de emerg√™ncia...');
    try {
        const supervisor = new SupervisorBot();
        
        // Mock da fun√ß√£o de an√°lise para simular emerg√™ncia
        supervisor.iaChat.analisarMercado = async () => {
            return {
                timestamp: new Date().toISOString(),
                simbolo: 'BTCUSDT',
                chatgpt: 'EMERG√äNCIA: Mercado em colapso! Vender tudo!',
                deepseek: 'EMERG√äNCIA: Queda livre detectada!',
                consenso: { acao: 'VENDER', confianca: 95, motivo: 'Emerg√™ncia de mercado' },
                emergencia: true
            };
        };
        
        // Processar par com emerg√™ncia
        await supervisor.processarPar('BTCUSDT');
        
        // Verificar se a emerg√™ncia foi detectada
        if (supervisor.emergenciaAtiva) {
            console.log('‚úì Emerg√™ncia detectada corretamente');
            testsPassed++;
        } else {
            console.log('‚úó Falha na detec√ß√£o de emerg√™ncia');
        }
    } catch (error) {
        console.log('‚úó Erro na detec√ß√£o de emerg√™ncia:', error.message);
    }
    
    // Teste 6: Gera√ß√£o de Relat√≥rio
    totalTests++;
    console.log('\n6. Testando gera√ß√£o de relat√≥rio...');
    try {
        const supervisor = new SupervisorBot();
        
        const relatorio = await supervisor.gerarRelatorio();
        
        if (relatorio && relatorio.timestamp) {
            console.log('‚úì Relat√≥rio gerado com sucesso');
            testsPassed++;
        } else {
            console.log('‚úó Falha na gera√ß√£o do relat√≥rio');
        }
    } catch (error) {
        console.log('‚úó Erro na gera√ß√£o do relat√≥rio:', error.message);
    }
    
    // Resultados
    console.log('\n=== RESULTADOS DOS TESTES ===');
    console.log(`Testes aprovados: ${testsPassed}/${totalTests}`);
    
    if (testsPassed === totalTests) {
        console.log('\nüéâ Todos os testes passaram! O SupervisorBot est√° funcionando corretamente.');
    } else {
        console.log('\n‚ùå Alguns testes falharam. Verifique os logs acima para detalhes.');
    }
    
    // Limpar arquivos de teste
    await cleanTestFiles();
}

async function cleanTestFiles() {
    try {
        const filesToRemove = [
            'bot_agressivo6.mjs',
            'bot_agressivo6.bkp',
            'supervisor_log.json',
            'analise_consolidada.json'
        ];
        
        const dirsToRemove = [
            'estados_pares',
            'recomendacoes_pares',
            'backups',
            'relatorios'
        ];
        
        for (const file of filesToRemove) {
            try {
                await fs.unlink(file);
            } catch (error) {
                // Ignorar se o arquivo n√£o existir
            }
        }
        
        for (const dir of dirsToRemove) {
            try {
                await fs.rm(dir, { recursive: true, force: true });
            } catch (error) {
                // Ignorar se o diret√≥rio n√£o existir
            }
        }
        
        console.log('\nüßπ Arquivos de teste removidos');
    } catch (error) {
        console.log('Erro ao limpar arquivos de teste:', error.message);
    }
}

// Executar os testes
runTests().catch(console.error);